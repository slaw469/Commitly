# GitHub Actions Workflow for Commitly
# Validates commit messages against Conventional Commits standards

name: Validate Commit Messages

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
      - develop

jobs:
  validate-commits:
    runs-on: ubuntu-latest
    name: Validate Commit Messages
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Commitly CLI
        run: npm install -g @commitly/cli

      - name: Get commit messages
        id: commits
        run: |
          # Get all commits in the PR or push
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # For PRs, get commits between base and head
            COMMITS=$(git log --format=%H ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
          else
            # For pushes, get commits in the push
            COMMITS=$(git log --format=%H ${{ github.event.before }}..${{ github.event.after }})
          fi
          
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Validate each commit
        env:
          COMMITS: ${{ steps.commits.outputs.commits }}
        run: |
          FAILED=0
          TOTAL=0
          
          echo "🔍 Validating commit messages..."
          echo ""
          
          while IFS= read -r commit; do
            if [ -z "$commit" ]; then
              continue
            fi
            
            TOTAL=$((TOTAL + 1))
            MESSAGE=$(git log --format=%B -n 1 $commit)
            
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "Commit: ${commit:0:8}"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            
            if commitly check "$MESSAGE"; then
              echo "✅ Valid commit message"
            else
              echo "❌ Invalid commit message"
              FAILED=$((FAILED + 1))
            fi
            
            echo ""
          done <<< "$COMMITS"
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Summary:"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Total commits: $TOTAL"
          echo "Valid commits: $((TOTAL - FAILED))"
          echo "Invalid commits: $FAILED"
          
          if [ $FAILED -gt 0 ]; then
            echo ""
            echo "❌ Commit message validation failed!"
            echo "Please fix the invalid commit messages following Conventional Commits format:"
            echo "  <type>(<scope>): <subject>"
            echo ""
            echo "Example: feat(auth): add login functionality"
            echo ""
            echo "Valid types: feat, fix, docs, style, refactor, perf, test, build, ci, chore, revert"
            exit 1
          fi
          
          echo ""
          echo "✅ All commit messages are valid!"

      - name: Comment on PR (if failed)
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ❌ Commit Message Validation Failed

            One or more commit messages in this PR do not follow the Conventional Commits format.

            ### Format
            \`\`\`
            <type>(<scope>): <subject>

            <body>

            <footer>
            \`\`\`

            ### Valid Types
            - \`feat\`: A new feature
            - \`fix\`: A bug fix
            - \`docs\`: Documentation only changes
            - \`style\`: Code style changes (formatting, etc.)
            - \`refactor\`: Code refactoring
            - \`perf\`: Performance improvements
            - \`test\`: Adding or updating tests
            - \`build\`: Build system changes
            - \`ci\`: CI configuration changes
            - \`chore\`: Other changes

            ### Example
            \`\`\`
            feat(auth): add social login support

            Implement Google and GitHub OAuth providers
            with proper error handling and token refresh.

            Closes #123
            \`\`\`

            Please amend your commits or use \`git rebase -i\` to fix the commit messages.`
            })

